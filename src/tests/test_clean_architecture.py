#!/usr/bin/env python3
"""
Clean Architecture Test Suite - Comprehensive Testing
B·ªô test Clean Architecture - Test to√†n di·ªán

üìö H∆Ø·ªöNG D·∫™N CHO NG∆Ø·ªúI M·ªöI:
===============================================

ƒê√¢y l√† file test ch√≠nh ƒë·ªÉ ki·ªÉm tra c·∫•u tr√∫c Clean Architecture.
Clean Architecture l√† m·ªôt ki·∫øn tr√∫c ph·∫ßn m·ªÅm gi√∫p:

1. T√°ch bi·ªát c√°c layer (l·ªõp) r√µ r√†ng
2. D·ªÖ d√†ng test v√† b·∫£o tr√¨
3. Linh ho·∫°t trong vi·ªác thay ƒë·ªïi implementation
4. Ph√π h·ª£p cho team development

C·∫§U TR√öC CLEAN ARCHITECTURE:
- Domain Layer: Ch·ª©a business logic v√† entities
- Application Layer: Ch·ª©a use cases v√† orchestration  
- Infrastructure Layer: Ch·ª©a external dependencies (database, APIs)
- Presentation Layer: Ch·ª©a user interfaces (CLI, Web, API)

C√ÅCH CH·∫†Y TEST:
- Ch·∫°y t·∫•t c·∫£: py src/tests/test_clean_architecture.py
- Ch·∫°y t·ª´ng test: py -m pytest src/tests/test_clean_architecture.py::test_name
"""

import sys
import os
import unittest
from typing import Optional

# Th√™m src v√†o Python path ƒë·ªÉ c√≥ th·ªÉ import c√°c module
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))


class TestCleanArchitecture(unittest.TestCase):
    """
    Test Clean Architecture Structure
    Test c·∫•u tr√∫c Clean Architecture
    
    üìù GI·∫¢I TH√çCH:
    - unittest.TestCase: Base class cho t·∫•t c·∫£ test cases
    - M·ªói method b·∫Øt ƒë·∫ßu v·ªõi 'test_' s·∫Ω ƒë∆∞·ª£c ch·∫°y t·ª± ƒë·ªông
    - assertEqual, assertTrue, assertFalse: C√°c assertion ƒë·ªÉ ki·ªÉm tra k·∫øt qu·∫£
    """
    
    def setUp(self):
        """
        Setup method - Ch·∫°y tr∆∞·ªõc m·ªói test
        üìù GI·∫¢I TH√çCH: 
        - setUp() ƒë∆∞·ª£c g·ªçi tr∆∞·ªõc m·ªói test method
        - D√πng ƒë·ªÉ chu·∫©n b·ªã d·ªØ li·ªáu test
        - T∆∞∆°ng t·ª± constructor trong class
        """
        print(f"\nüîß Setting up test: {self._testMethodName}")
    
    def tearDown(self):
        """
        Teardown method - Ch·∫°y sau m·ªói test
        üìù GI·∫¢I TH√çCH:
        - tearDown() ƒë∆∞·ª£c g·ªçi sau m·ªói test method
        - D√πng ƒë·ªÉ d·ªçn d·∫πp sau khi test xong
        - T∆∞∆°ng t·ª± destructor trong class
        """
        print(f"üßπ Cleaning up test: {self._testMethodName}")
    
    def test_domain_entities_import(self):
        """
        Test import Domain Entities
        Test import c√°c th·ª±c th·ªÉ Domain
        
        üìù GI·∫¢I TH√çCH:
        - Domain entities l√† c√°c ƒë·ªëi t∆∞·ª£ng nghi·ªáp v·ª• c·ªët l√µi
        - Ch√∫ng ch·ª©a business logic v√† rules
        - Kh√¥ng ph·ª• thu·ªôc v√†o b·∫•t k·ª≥ layer n√†o kh√°c
        """
        print("üì¶ Testing Domain Entities Import...")
        
        try:
            # Import c√°c entities t·ª´ domain layer
            from domain.entities.customer import Customer
            from domain.entities.program import Program, RegisterItem
            from domain.entities.evaluation import ConditionGroup, ConditionItem, AuditPicture, CustomerEvaluationResult
            from domain.entities.registration import Registration
            
            # Ki·ªÉm tra c√°c class c√≥ t·ªìn t·∫°i kh√¥ng
            self.assertTrue(hasattr(Customer, '__init__'), "Customer class should have __init__ method")
            self.assertTrue(hasattr(Program, '__init__'), "Program class should have __init__ method")
            self.assertTrue(hasattr(RegisterItem, '__init__'), "RegisterItem class should have __init__ method")
            self.assertTrue(hasattr(ConditionGroup, '__init__'), "ConditionGroup class should have __init__ method")
            self.assertTrue(hasattr(ConditionItem, '__init__'), "ConditionItem class should have __init__ method")
            self.assertTrue(hasattr(AuditPicture, '__init__'), "AuditPicture class should have __init__ method")
            self.assertTrue(hasattr(CustomerEvaluationResult, '__init__'), "CustomerEvaluationResult class should have __init__ method")
            self.assertTrue(hasattr(Registration, '__init__'), "Registration class should have __init__ method")
            
            print("‚úÖ Domain entities imported successfully")
            
        except ImportError as e:
            self.fail(f"Failed to import domain entities: {e}")
    
    def test_domain_repositories_import(self):
        """
        Test import Domain Repository Interfaces
        Test import c√°c giao di·ªán Repository Domain
        
        üìù GI·∫¢I TH√çCH:
        - Repository interfaces ƒë·ªãnh nghƒ©a contract cho data access
        - Ch√∫ng l√† abstractions (tr·ª´u t∆∞·ª£ng h√≥a) cho database operations
        - Domain layer ch·ªâ bi·∫øt v·ªÅ interfaces, kh√¥ng bi·∫øt implementation c·ª• th·ªÉ
        """
        print("üì¶ Testing Domain Repository Interfaces Import...")
        
        try:
            from domain.repositories.customer_repository import CustomerRepository
            from domain.repositories.program_repository import ProgramRepository
            from domain.repositories.evaluation_repository import EvaluationRepository
            from domain.repositories.registration_repository import RegistrationRepository
            
            # Ki·ªÉm tra c√°c interface c√≥ t·ªìn t·∫°i kh√¥ng
            self.assertTrue(hasattr(CustomerRepository, '__abstractmethods__'), "CustomerRepository should be abstract")
            self.assertTrue(hasattr(ProgramRepository, '__abstractmethods__'), "ProgramRepository should be abstract")
            self.assertTrue(hasattr(EvaluationRepository, '__abstractmethods__'), "EvaluationRepository should be abstract")
            self.assertTrue(hasattr(RegistrationRepository, '__abstractmethods__'), "RegistrationRepository should be abstract")
            
            print("‚úÖ Domain repository interfaces imported successfully")
            
        except ImportError as e:
            self.fail(f"Failed to import domain repositories: {e}")
    
    def test_domain_services_import(self):
        """
        Test import Domain Services
        Test import c√°c d·ªãch v·ª• Domain
        
        üìù GI·∫¢I TH√çCH:
        - Domain services ch·ª©a business logic ph·ª©c t·∫°p
        - Ch√∫ng orchestrate (ƒëi·ªÅu ph·ªëi) c√°c entities v√† repositories
        - Ch·ª©a logic kh√¥ng thu·ªôc v·ªÅ entity c·ª• th·ªÉ n√†o
        """
        print("üì¶ Testing Domain Services Import...")
        
        try:
            from domain.services.evaluation_service import EvaluationService
            
            # Ki·ªÉm tra service c√≥ t·ªìn t·∫°i kh√¥ng
            self.assertTrue(hasattr(EvaluationService, '__init__'), "EvaluationService should have __init__ method")
            self.assertTrue(hasattr(EvaluationService, 'evaluate_customer'), "EvaluationService should have evaluate_customer method")
            
            print("‚úÖ Domain services imported successfully")
            
        except ImportError as e:
            self.fail(f"Failed to import domain services: {e}")
    
    def test_application_use_cases_import(self):
        """
        Test import Application Use Cases
        Test import c√°c Use Case ·ª©ng d·ª•ng
        
        üìù GI·∫¢I TH√çCH:
        - Use cases l√† c√°c business operations c·ª• th·ªÉ
        - Ch√∫ng orchestrate domain services v√† repositories
        - Cung c·∫•p interface ƒë∆°n gi·∫£n cho presentation layer
        """
        print("üì¶ Testing Application Use Cases Import...")
        
        try:
            from application.use_cases.evaluate_customer_use_case import EvaluateCustomerUseCase
            
            # Ki·ªÉm tra use case c√≥ t·ªìn t·∫°i kh√¥ng
            self.assertTrue(hasattr(EvaluateCustomerUseCase, '__init__'), "EvaluateCustomerUseCase should have __init__ method")
            self.assertTrue(hasattr(EvaluateCustomerUseCase, 'execute'), "EvaluateCustomerUseCase should have execute method")
            
            print("‚úÖ Application use cases imported successfully")
            
        except ImportError as e:
            self.fail(f"Failed to import application use cases: {e}")
    
    def test_infrastructure_import(self):
        """
        Test import Infrastructure Layer
        Test import l·ªõp Infrastructure
        
        üìù GI·∫¢I TH√çCH:
        - Infrastructure layer ch·ª©a external dependencies
        - Database connections, external APIs, file systems
        - Implement c√°c interfaces t·ª´ domain layer
        """
        print("üì¶ Testing Infrastructure Layer Import...")
        
        try:
            from infrastructure.database.sql_server_connection import SqlServerConnection
            
            # Ki·ªÉm tra infrastructure c√≥ t·ªìn t·∫°i kh√¥ng
            self.assertTrue(hasattr(SqlServerConnection, '__init__'), "SqlServerConnection should have __init__ method")
            self.assertTrue(hasattr(SqlServerConnection, 'test_connection'), "SqlServerConnection should have test_connection method")
            
            print("‚úÖ Infrastructure layer imported successfully")
            
        except ImportError as e:
            self.fail(f"Failed to import infrastructure layer: {e}")
    
    def test_presentation_import(self):
        """
        Test import Presentation Layer
        Test import l·ªõp Presentation
        
        üìù GI·∫¢I TH√çCH:
        - Presentation layer ch·ª©a user interfaces
        - CLI, Web UI, REST API, GraphQL API
        - S·ª≠ d·ª•ng use cases t·ª´ application layer
        """
        print("üì¶ Testing Presentation Layer Import...")
        
        try:
            from presentation.cli.evaluation_cli import EvaluationCLI
            
            # Ki·ªÉm tra presentation c√≥ t·ªìn t·∫°i kh√¥ng
            self.assertTrue(hasattr(EvaluationCLI, '__init__'), "EvaluationCLI should have __init__ method")
            self.assertTrue(hasattr(EvaluationCLI, 'run_interactive'), "EvaluationCLI should have run_interactive method")
            
            print("‚úÖ Presentation layer imported successfully")
            
        except ImportError as e:
            self.fail(f"Failed to import presentation layer: {e}")
    
    def test_configuration_import(self):
        """
        Test import Configuration System
        Test import h·ªá th·ªëng c·∫•u h√¨nh
        
        üìù GI·∫¢I TH√çCH:
        - Configuration system qu·∫£n l√Ω settings
        - Database connections, API keys, feature flags
        - H·ªó tr·ª£ environment-based configuration
        """
        print("üì¶ Testing Configuration System Import...")
        
        try:
            from config.settings import Settings, DatabaseSettings, LoggingSettings
            
            # Ki·ªÉm tra configuration c√≥ t·ªìn t·∫°i kh√¥ng
            self.assertTrue(hasattr(Settings, 'default'), "Settings should have default method")
            self.assertTrue(hasattr(Settings, 'from_env'), "Settings should have from_env method")
            self.assertTrue(hasattr(DatabaseSettings, 'from_env'), "DatabaseSettings should have from_env method")
            self.assertTrue(hasattr(LoggingSettings, 'from_env'), "LoggingSettings should have from_env method")
            
            print("‚úÖ Configuration system imported successfully")
            
        except ImportError as e:
            self.fail(f"Failed to import configuration system: {e}")
    
    def test_entity_creation(self):
        """
        Test Entity Creation and Business Logic
        Test t·∫°o entities v√† business logic
        
        üìù GI·∫¢I TH√çCH:
        - Entities ch·ª©a business logic v√† rules
        - Ch√∫ng c√≥ methods ƒë·ªÉ th·ª±c hi·ªán business operations
        - Test n√†y ki·ªÉm tra entities ho·∫°t ƒë·ªông ƒë√∫ng kh√¥ng
        """
        print("üì¶ Testing Entity Creation and Business Logic...")
        
        try:
            from domain.entities.customer import Customer
            from domain.entities.program import Program, RegisterItem
            from domain.entities.evaluation import ConditionGroup, ConditionItem, AuditPicture, CustomerEvaluationResult
            from domain.entities.registration import Registration
            from datetime import datetime
            
            # Test Customer creation
            customer = Customer(
                customer_code="CUST001",
                name="Test Customer",
                email="test@example.com"
            )
            self.assertEqual(customer.customer_code, "CUST001")
            self.assertEqual(customer.name, "Test Customer")
            print("‚úÖ Customer entity created successfully")
            
            # Test Program creation
            program = Program(
                program_code="PROG001",
                name="Test Program",
                description="Test Description"
            )
            self.assertEqual(program.program_code, "PROG001")
            self.assertTrue(program.is_active)  # Default value
            print("‚úÖ Program entity created successfully")
            
            # Test RegisterItem creation
            register_item = RegisterItem(
                yyyymm=202509,
                program_code="PROG001",
                type_code="TYPE_BEVERAGE",
                item="KE_3_O",
                facing=4,
                unit=3
            )
            self.assertEqual(register_item.yyyymm, 202509)
            self.assertEqual(register_item.facing, 4)
            print("‚úÖ RegisterItem entity created successfully")
            
            # Test ConditionGroup creation
            condition_group = ConditionGroup(
                yyyymm=202509,
                program_code="PROG001",
                group=1,
                type_code="TYPE_BEVERAGE",
                group_point=2
            )
            self.assertEqual(condition_group.group, 1)
            self.assertEqual(condition_group.group_point, 2)
            print("‚úÖ ConditionGroup entity created successfully")
            
            # Test ConditionItem creation and business logic
            condition_item = ConditionItem(
                yyyymm=202509,
                program_code="PROG001",
                group=1,
                condition_code="SPA_CLEANLINESS",
                condition_min_value=80,
                condition_point=1
            )
            self.assertEqual(condition_item.condition_code, "SPA_CLEANLINESS")
            
            # Test business logic: meets_minimum method
            self.assertTrue(condition_item.meets_minimum(85), "85 should meet minimum 80")
            self.assertFalse(condition_item.meets_minimum(75), "75 should not meet minimum 80")
            self.assertTrue(condition_item.meets_minimum(80), "80 should meet minimum 80")
            print("‚úÖ ConditionItem business logic working correctly")
            
            # Test AuditPicture creation and business logic
            audit_picture = AuditPicture(
                yyyymm=202509,
                customer_code="CUST001",
                condition_code="SPA_CLEANLINESS",
                value="85",
                audit_date=datetime.now()
            )
            self.assertEqual(audit_picture.value, "85")
            self.assertEqual(audit_picture.numeric_value, 85)  # Test conversion
            print("‚úÖ AuditPicture entity created successfully")
            
            # Test Registration creation and business logic
            registration = Registration(
                yyyymm=202509,
                program_code="PROG001",
                customer_code="CUST001",
                display_type="KE_3_O",
                register_qty=3,
                status=True
            )
            self.assertTrue(registration.is_active, "Registration should be active")
            self.assertFalse(registration.is_inactive, "Registration should not be inactive")
            print("‚úÖ Registration entity created successfully")
            
            # Test CustomerEvaluationResult creation and business logic
            evaluation_result = CustomerEvaluationResult(
                yyyymm=202509,
                customer_code="CUST001",
                program_code="PROG001",
                total_points=6,
                max_possible_points=6,
                meets_criteria=True,
                failed_conditions=[],
                registration_status=True
            )
            self.assertEqual(evaluation_result.total_points, 6)
            self.assertEqual(evaluation_result.max_possible_points, 6)
            self.assertEqual(evaluation_result.success_rate, 100.0)
            self.assertTrue(evaluation_result.is_eligible_for_reward, "Should be eligible for reward")
            self.assertEqual(evaluation_result.get_failure_summary(), "No failures")
            print("‚úÖ CustomerEvaluationResult business logic working correctly")
            
        except Exception as e:
            self.fail(f"Entity creation or business logic test failed: {e}")
    
    def test_database_connection(self):
        """
        Test Database Connection
        Test k·∫øt n·ªëi database
        
        üìù GI·∫¢I TH√çCH:
        - Database connection l√† infrastructure concern
        - Test n√†y ki·ªÉm tra k·∫øt n·ªëi database c√≥ ho·∫°t ƒë·ªông kh√¥ng
        - Trong Clean Architecture, database l√† external dependency
        """
        print("üì¶ Testing Database Connection...")
        
        try:
            from infrastructure.database.sql_server_connection import SqlServerConnection
            
            # T·∫°o database connection
            db_conn = SqlServerConnection()
            self.assertIsNotNone(db_conn, "Database connection should be created")
            print("‚úÖ Database connection object created")
            
            # Test connection
            if db_conn.test_connection():
                print("‚úÖ Database connection test successful")
                
                # Get server info
                info = db_conn.get_server_info()
                self.assertIsInstance(info, dict, "Server info should be a dictionary")
                self.assertIn('server', info, "Server info should contain 'server' key")
                print(f"üìä Server: {info.get('server', 'Unknown')}")
                print(f"üìä Database: {info.get('database', 'Unknown')}")
            else:
                print("‚ö†Ô∏è Database connection test failed - this is expected if database is not available")
            
        except Exception as e:
            self.fail(f"Database connection test failed: {e}")
    
    def test_configuration_system(self):
        """
        Test Configuration System
        Test h·ªá th·ªëng c·∫•u h√¨nh
        
        üìù GI·∫¢I TH√çCH:
        - Configuration system qu·∫£n l√Ω settings
        - H·ªó tr·ª£ default values v√† environment variables
        - Gi√∫p ·ª©ng d·ª•ng linh ho·∫°t trong c√°c m√¥i tr∆∞·ªùng kh√°c nhau
        """
        print("üì¶ Testing Configuration System...")
        
        try:
            from config.settings import Settings, DatabaseSettings, LoggingSettings
            
            # Test default settings
            settings = Settings.default()
            self.assertIsNotNone(settings, "Default settings should be created")
            self.assertIsNotNone(settings.database, "Database settings should be present")
            self.assertIsNotNone(settings.logging, "Logging settings should be present")
            print("‚úÖ Default settings created successfully")
            
            # Test environment settings
            env_settings = Settings.from_env()
            self.assertIsNotNone(env_settings, "Environment settings should be created")
            print("‚úÖ Environment settings created successfully")
            
            # Test individual settings
            db_settings = DatabaseSettings.from_env()
            self.assertIsNotNone(db_settings.server, "Database server should be set")
            self.assertIsNotNone(db_settings.database, "Database name should be set")
            print("‚úÖ Database settings working correctly")
            
            log_settings = LoggingSettings.from_env()
            self.assertIsNotNone(log_settings.level, "Log level should be set")
            print("‚úÖ Logging settings working correctly")
            
        except Exception as e:
            self.fail(f"Configuration system test failed: {e}")


def run_tests():
    """
    Run all tests
    Ch·∫°y t·∫•t c·∫£ tests
    
    üìù GI·∫¢I TH√çCH:
    - unittest.main() s·∫Ω t·ª± ƒë·ªông t√¨m v√† ch·∫°y t·∫•t c·∫£ test methods
    - Test methods ph·∫£i b·∫Øt ƒë·∫ßu v·ªõi 'test_'
    - K·∫øt qu·∫£ s·∫Ω hi·ªÉn th·ªã PASS/FAIL cho t·ª´ng test
    """
    print("üöÄ CLEAN ARCHITECTURE TEST SUITE")
    print("=" * 60)
    print("Testing the Clean Architecture structure...")
    print("üìö This test suite validates the Clean Architecture implementation")
    print()
    
    # T·∫°o test suite
    loader = unittest.TestLoader()
    suite = loader.loadTestsFromTestCase(TestCleanArchitecture)
    
    # Ch·∫°y tests v·ªõi verbose output
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£ t·ªïng k·∫øt
    print("\n" + "=" * 60)
    print("TEST SUMMARY")
    print("=" * 60)
    
    total_tests = result.testsRun
    failures = len(result.failures)
    errors = len(result.errors)
    passed = total_tests - failures - errors
    
    print(f"üìä Total Tests: {total_tests}")
    print(f"‚úÖ Passed: {passed}")
    print(f"‚ùå Failed: {failures}")
    print(f"üí• Errors: {errors}")
    
    if failures > 0:
        print("\n‚ùå FAILURES:")
        for test, traceback in result.failures:
            print(f"  - {test}: {traceback.split('AssertionError: ')[-1].split('\\n')[0]}")
    
    if errors > 0:
        print("\nüí• ERRORS:")
        for test, traceback in result.errors:
            print(f"  - {test}: {traceback.split('\\n')[-2]}")
    
    success_rate = (passed / total_tests * 100) if total_tests > 0 else 0
    print(f"\nüìà Success Rate: {success_rate:.1f}%")
    
    if passed == total_tests:
        print("üéâ All tests passed! Clean Architecture is working correctly.")
        return 0
    else:
        print("‚ö†Ô∏è Some tests failed. Please check the errors above.")
        return 1


if __name__ == "__main__":
    """
    Main entry point
    ƒêi·ªÉm v√†o ch√≠nh
    
    üìù GI·∫¢I TH√çCH:
    - Khi ch·∫°y file n√†y tr·ª±c ti·∫øp, __name__ s·∫Ω l√† "__main__"
    - Code trong block n√†y s·∫Ω ƒë∆∞·ª£c th·ª±c thi
    - sys.exit() ƒë·ªÉ tr·∫£ v·ªÅ exit code cho shell
    """
    exit_code = run_tests()
    sys.exit(exit_code)
